<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OG Blog</title>
    <description>:::::::::::::: description?</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 10 Sep 2022 15:56:32 +0900</pubDate>
    <lastBuildDate>Sat, 10 Sep 2022 15:56:32 +0900</lastBuildDate>
    <generator>Jekyll v4.2.2</generator>
    
      <item>
        <title>「Functional Programming for Java Developers」1 Why Functional Programming?</title>
        <description>&lt;h3 id=&quot;동시성-프로그램을-잘-작성해야-한다&quot;&gt;동시성 프로그램을 잘 작성해야 한다&lt;/h3&gt;
&lt;p&gt;동시성 문제에 접근하기 위한 최선의 방법이 함수형 프로그래밍이라고들 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;동시성 ? :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그만큼 함수형 프로그래밍은 동시성에 대한 명확한 원리를 제공하였고, 높은 수준의 추상적 개념을 탄생시켰다.&lt;/p&gt;

&lt;h3 id=&quot;문제는-데이터를-관리하는-문제로-귀결된다&quot;&gt;문제는 데이터를 관리하는 문제로 귀결된다&lt;/h3&gt;

&lt;p&gt;객체관계 매핑 (ORM) 이나 그와 유사한 다른 미들웨어는 관계형 데이터를 객체로 변환하고,&lt;/p&gt;

&lt;p&gt;객체를 어플리케이션 주위로 전송하여 서로 주고 받으며, 최종적인 업데이트를 위해 객체를 다시 관계형 데이터로 변환시키는 일련의 과정을 통해서 지속적으로 오버헤드를 발생시킨다.&lt;/p&gt;

&lt;p&gt;오버헤드를 발생시키는 추가적인 코드는 테스트하고 유지보수 해야한다.&lt;/p&gt;

&lt;p&gt;저자는 위와 같은 관행이 생겨난 이유가 우리가 객체는 지나치게 사랑하지만 관계형 데이터는 미워하기 때문이라 한다. (공감한다)&lt;/p&gt;

&lt;p&gt;SQL 을 통해 얻은 결과 같은 관계형 데이터는 결국 함수적인 방법을 통해 관리할 수 있는 데이터 컬렉션에 불과하다.&lt;/p&gt;

&lt;p&gt;그렇다면 객체를 경유하는 대신 그러한 데이터 위해서 직접 작업을 하는 것이 더 낫지 않겠느냐고 제안한다.&lt;/p&gt;

&lt;h3 id=&quot;함수형-프로그래밍은-모듈화되어-있다&quot;&gt;함수형 프로그래밍은 모듈화되어 있다&lt;/h3&gt;

&lt;p&gt;모듈화를 위해 필요한 것은 함수형 프로그래밍에서 말하는 함수의 성질이다.&lt;/p&gt;

&lt;p&gt;그것은 side effects 를 가지지 않고, 다른 객체에 종속되지 않기 때문에 많은 곳에서 재사용할 수 있다.&lt;/p&gt;

&lt;p&gt;함수형 프로그래밍이 더 유용하고, 재사용이 더 편리하고, 구성이 용이하고, 테스트하기 더 간편한 추상화를 제공한다.&lt;/p&gt;

&lt;h3 id=&quot;더-빠르게-작업해야-한다&quot;&gt;더 빠르게 작업해야 한다&lt;/h3&gt;

&lt;p&gt;코드가 사용자 요구사항에 대해 최소한으로 충분한 수준을 유지하는 동시에 변화에 대해선 유연할 수 있게 만드는 방법을 다시 생각해 볼 필요가 있는데,&lt;/p&gt;

&lt;p&gt;함수형 프로그래밍이 그러한 지점에서 도움을 줄 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;함수형-프로그래밍은-단순함으로의-복귀다&quot;&gt;함수형 프로그래밍은 단순함으로의 복귀다&lt;/h3&gt;

&lt;p&gt;함수형 프로그래밍은 우연히 발생한 복잡성 (accidental complexity) 에 대한 응답이다.&lt;/p&gt;

&lt;p&gt;우연히 발생한 복잡성: 도메인을 구현하게 위해 선택된 방식에서 발생한 복잡성&lt;/p&gt;

&lt;h5 id=&quot;다시&quot;&gt;다시&lt;/h5&gt;

&lt;p&gt;명확한 방식으로 타입, 함수를 설계하게 된다.&lt;/p&gt;

&lt;p&gt;간결하게 코드를 작성하게 된다.&lt;/p&gt;

&lt;p&gt;모듈의 재사용에 대해 다르게 생각하게 된다.&lt;/p&gt;

&lt;p&gt;빠르게 변화하고 민첩하게 반응해야 하는 현대 문제 해결에 있어 함수형 프로그래밍이 유용하다고 저자는 얘기한다.&lt;/p&gt;

&lt;p&gt;그리고 저자는 함수형 프로그래밍을 공부하면서 ** 객체를 제한적으로 사용하면서 기본적으로 함수형 프로그램을 작성하는 사람** 이 되었다고 한다.&lt;/p&gt;

&lt;p&gt;객체 지향도. 함수형 프로그래밍도 도구에 지나지 않는다. &lt;em&gt;명심하자&lt;/em&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 10 Sep 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022/09/10/functional-programming-01-01/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/09/10/functional-programming-01-01/</guid>
        
        <category>java</category>
        
        <category>functional-programming</category>
        
        <category>functional-programming-for-java-developers</category>
        
        <category>O'REILLY</category>
        
        <category>함수형프로그래밍</category>
        
        <category>오렐리</category>
        
        
      </item>
    
      <item>
        <title>페이스 조절은 어떻게 하는 걸까</title>
        <description>&lt;p&gt;입사한지 7개월이 넘어간다.&lt;/p&gt;

&lt;p&gt;나는 눈만 한 번 깜빡했는데 해가 넘어가려 한다.&lt;/p&gt;

&lt;p&gt;정신없이 지나갔다.&lt;/p&gt;

&lt;p&gt;요즘엔 체력관리와 페이스 조절에 대한 생각을 해볼 필요성을 느끼고 있다.&lt;/p&gt;

&lt;p&gt;사실 최근들어 3개월 넘게 정시 퇴근은 고사하고 야근하지 않은 날이 없다.&lt;/p&gt;

&lt;p&gt;흔한 말로 영혼까지 갈리는 중인데 나 포함 모든 팀원들이 같은 상태이다.&lt;/p&gt;

&lt;p&gt;인원 대비 진행되고 있는 프로젝트가 많고 크기가 크다.&lt;/p&gt;

&lt;p&gt;지금 도메인 개발 프로젝트를 혼자 하고 있는데 처음엔 스트레스를 굉장히 많이 받았다.&lt;/p&gt;

&lt;p&gt;부담감도 크고 일하는 절대적인 시간도 많았고 피곤함이 누적되니까 예민해졌다.&lt;/p&gt;

&lt;p&gt;지금은 좀 해탈했지만…&lt;/p&gt;

&lt;p&gt;이대로 (혼자서 정해진 기한내에 마치기 위해 시간을 많이 쓴다?) 는 버틸 수 없다.&lt;/p&gt;

&lt;p&gt;효율적으로 일하기 위해선 내 상태도 효율적으로 써야한다.&lt;/p&gt;

&lt;p&gt;노가다(?)성 작업을 제외하곤 피곤에 찌들어 시간을 많이 보낸다고 해결되는게 그다지 많이 않다.&lt;/p&gt;

&lt;p&gt;그 시간에 더 보고. 더 듣고. 더 쓰고. 더 나아가자.&lt;/p&gt;

&lt;p&gt;그리고 컴퓨터랑만 사는 거 아니니까 가족들, 친구들도 보고 그러자.&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Sep 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022/09/09/daily-01/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/09/09/daily-01/</guid>
        
        <category>daily</category>
        
        <category>직장인</category>
        
        
      </item>
    
      <item>
        <title>「Effective Java」10 Exception</title>
        <description>&lt;p&gt;저자가 얘기하는 운이 없는 경우 마주치게 될 코드는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;climb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArrayIndexOutOfBoundsException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드가 운 없는 사람이 마주하게 되는 이유&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;가독성&lt;/li&gt;
  &lt;li&gt;무한루프를 돌고 돌아 배열 끝에서야 예외를 마주한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그런데 위 코드에서 예외가 필요할까?&lt;/p&gt;

&lt;p&gt;아래 코드와 위 코드는 다른 일을 하지 않는다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Mountain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;climb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;일반적 반복문도 배열의 끝에 도달하면 종료된다.&lt;/p&gt;

&lt;p&gt;따라서&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;예외는 말 그대로 예외 상황에서만 써야 한다&lt;/li&gt;
  &lt;li&gt;잘 설계된 API 라면 클라이언트가 정상적 제어 흐름에서 예외를 사용할 일이 없게 해야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;결론 : 아무때나 예외를 남발하지 말자.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Sep 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022/09/05/effective-java-10-01/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/09/05/effective-java-10-01/</guid>
        
        <category>java</category>
        
        <category>effective-java</category>
        
        <category>자바</category>
        
        <category>이팩티브자바</category>
        
        
      </item>
    
      <item>
        <title>「Effective Java」4 Class &amp; Interface</title>
        <description>&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Point {
    public double x;
    public double y;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;데이터 필드에 직접 접근이 가능하다.&lt;/p&gt;

&lt;p&gt;이는 캡슐화 이점을 제공하지 못한다는 것이다.&lt;/p&gt;

&lt;p&gt;필드를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; 으로 변경하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; 접근자 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getter&lt;/code&gt;) 를 추가하는 방법으로 이러한 문제를 해결할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;클래스가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; 이라면 이 방식을 사용해야 한다.&lt;/p&gt;

&lt;p&gt;접근자 메서드를 제공함으로써 클래수 내부의 유연성을 획득하였다.&lt;/p&gt;

</description>
        <pubDate>Sun, 04 Sep 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022/09/04/effective-java-04-02/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/09/04/effective-java-04-02/</guid>
        
        <category>java</category>
        
        <category>effective-java</category>
        
        <category>자바</category>
        
        <category>이팩티브자바</category>
        
        
      </item>
    
      <item>
        <title>「Effective Java」4 Class &amp; Interface</title>
        <description>&lt;p&gt;잘 설계된 컴포넌트의 가장 큰 특징 중 하나는 &lt;strong&gt;캡슐화&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;p&gt;코드 클래스와 멤버의 &lt;strong&gt;접근성을 가능한 한 좁혀야 한다&lt;/strong&gt; 라는 기본 원칙을 지켜야 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;접근 수준을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; 으로 설정하면 공개 API 가 되고,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package-private&lt;/code&gt; 으로 선언하면 해당 패키지 내에서만 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;외부에서 사용하지 않는 클래스나 인터페이스를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package-private&lt;/code&gt; 으로 설정하면&lt;/p&gt;

&lt;p&gt;클라이언트에 영향을 주지 않고 수정이나 교체가 가능해진다.&lt;/p&gt;

&lt;p&gt;(이번 결제/환불 원장 프로젝트에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public/private&lt;/code&gt; 관리를 통해 장점을 많이 느끼고 있다.)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;한 클래스에서만 사용하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package-private top-level&lt;/code&gt; 클래스/인터페이스 는&lt;/p&gt;

&lt;p&gt;이를 사용하는 클래스 안에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private static&lt;/code&gt; 으로 중첩 시키는 방법이 있다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;top-level&lt;/em&gt; 로 같은 패키지의 모든 클래스가 접근 가능하지만&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private static&lt;/code&gt; 으로 중첩하면 바깥 클래스 하나에서만 접근이 가능하다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;책에서는 이보다 더 중요한 아니 가장 중요한 것으로 &lt;strong&gt;public 일 필요가 없는 클래스의 접근 수준을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package-private&lt;/code&gt;&lt;/strong&gt; 으로 좁히는 것을 뽑는다.&lt;/p&gt;

&lt;p&gt;다시 한 번. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; 은 패키지의 API 이고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package-private&lt;/code&gt; 은 내부 구현이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;멤버에 부여할 수 있는 접근 수준 4가지를 접근 범위가 좁은 것 부터 다시 살펴보자.
멤버 : 필드, 메서드, 중첩 클래스, 중첩 인터페이스&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt;: 멤버를 선언한 &lt;em&gt;top-level&lt;/em&gt; 에서만 접근 가능&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package-private&lt;/code&gt;: 멤버가 소속된 패키지 내 모든 클래스에서 접근 가능. 접근 제한자가 명시되지 않았을 때 적용되는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; 패키지 접근 수준. (인터페이스의 멤버는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package-private&lt;/code&gt; 의 접근 범위를 포함하고, 이 멤버를 선언한 클래스의 하위 클래스에서도 접근 가능.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;: 모든 곳에서 접근 가능.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;1 : 공개 범위를 설계한 후, 이 외 모든 멤버를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; 로 만든다.&lt;/p&gt;

&lt;p&gt;2 : 같은 패키지 내 다른 클래스가 접근해야 하는 멤버를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package-private&lt;/code&gt; 로 풀어준다. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; 제한자를 제거한다)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;테스트를 위해서 클래스, 인터페이스, 멤버 접근 범위를 넓히려 할 때가 있는데 적당 수준까지는 괜찮다.&lt;/p&gt;

&lt;p&gt;예를 들면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; 클래스의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; 멤버를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package-private&lt;/code&gt; 으로. 그 이상은 안 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;테스트 대상을 같은 패키지에 두면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package-private&lt;/code&gt; 요소에 접근이 가능하기 때문에 이 이상으로 접근할 필요가 없다! (최근 경험담. 꿀팁을 얻었다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;그 외.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; 클래스의 인스턴스 필드는 되도록 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; 이 아니게.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; 가변 필드를 갖는 클래스는 일반적으로 &lt;em&gt;thread safe&lt;/em&gt; 하지 않다.&lt;/p&gt;

&lt;p&gt;클래스에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public static final&lt;/code&gt; 배열 필드를 두거나, 이 필드를 반환하는 접근자 메서드를 제공해선 안된다.&lt;/p&gt;

</description>
        <pubDate>Fri, 26 Aug 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022/08/26/effective-java-04-01/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/26/effective-java-04-01/</guid>
        
        <category>java</category>
        
        <category>effective-java</category>
        
        <category>자바</category>
        
        <category>이팩티브자바</category>
        
        
      </item>
    
  </channel>
</rss>
